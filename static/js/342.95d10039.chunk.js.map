{"version":3,"file":"static/js/342.95d10039.chunk.js","mappings":"kRAgCA,EA1BqB,SAAHA,GAAmB,IAAbC,EAAKD,EAALC,MAClBC,EAAaC,EAKjB,OAJIF,EAAMG,eACRF,EAAU,kCAAAG,OAAqCJ,EAAMG,gBAIrDE,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKC,IAAKP,EAAYQ,IAAKT,EAAMU,QACjCH,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAIN,EAAMW,kBAIdJ,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,OAAAD,SAAMN,EAAMU,WAIpB,ECPA,EAbiB,SAAHX,GAAkB,IAAZa,EAAIb,EAAJa,KAClB,OACEL,EAAAA,EAAAA,KAAA,MAAAD,SACGM,EAAKC,KAAI,SAAAb,GAAK,OACbO,EAAAA,EAAAA,KAACO,EAAY,CAAqBd,MAAOA,GAAtBA,EAAMe,QAAyB,KAI1D,ECmBA,EA5Ba,WACb,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAAgCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAc1B,OATAI,EAAAA,EAAAA,YAAU,WACRC,MAAM,GAADrB,OAHU,+BAIF,WAAAA,OAAUY,EAAO,qBAAAZ,OALhB,mCAK2C,oBACvDsB,MAAK,SAAAC,GAAG,OACRA,EAAIC,OAAOF,MAAK,SAAAG,GACdN,EAAYM,EAAKjB,KACnB,GAAE,GAEN,GAAG,CAACI,KAEFX,EAAAA,EAAAA,MAAAyB,EAAAA,SAAA,CAAAxB,SAAA,CACGgB,IAAYf,EAAAA,EAAAA,KAACwB,EAAQ,CAACnB,KAAMU,KAC3BA,IACAf,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,0BAKb,C","sources":["components/CastListItem/CastListItem.jsx","components/CastList/CastList.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\n// фото, якщо з бекенда не прийшла фотка актора\nimport noAvatar from '../../images/noAvatar.jpg';\n\n\nconst CastListItem = ({ actor }) => {\n  let actorPhoto = noAvatar;\n  if (actor.profile_path) {\n    actorPhoto = `https://image.tmdb.org/t/p/w500${actor.profile_path}`;\n  }\n\n  return (\n    <li>\n      <div>\n        <img src={actorPhoto} alt={actor.name} />\n        <div>\n          <p>{actor.character}</p>\n        </div>\n      </div>\n\n      <div>\n        <div>{actor.name}</div>\n      </div>\n    </li>\n  );\n};\n\nCastListItem.propTypes = {\n  actor: PropTypes.object.isRequired,\n};\n\nexport default CastListItem;\n","import PropTypes from 'prop-types';\n//import { Ul } from './CastList.styled';\nimport CastListItem from '../CastListItem/CastListItem';\n\n\n// передача в компонент відображення одного актора\nconst CastList = ({ cast }) => {\n  return (\n    <ul>\n      {cast.map(actor => (\n        <CastListItem key={actor.cast_id} actor={actor} />\n      ))}\n    </ul>\n  );\n};\nCastList.propTypes = {\n  cast: PropTypes.array.isRequired,\n};\n\nexport default CastList;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n//import PropTypes from 'prop-types';\nimport CastList from '../CastList/CastList';\n\nconst Cast = () => {\nconst { movieId } = useParams();\nconst [castList, setCastList] = useState([]);\n    \n  const API_KEY = '9cbb52e6579c256183b59d31049fbf06';\n  const BASE_URL = 'https://api.themoviedb.org/3';\n\n  useEffect(() => {\n    fetch(\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    ).then(res =>\n      res.json().then(data => {\n        setCastList(data.cast);\n      })\n    );\n  }, [movieId]);\n  return (\n    <>\n      {castList && <CastList cast={castList} />}\n      {!castList && (\n        <div>\n          <p>There is no casts</p>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["_ref","actor","actorPhoto","noAvatar","profile_path","concat","_jsxs","children","_jsx","src","alt","name","character","cast","map","CastListItem","cast_id","movieId","useParams","_useState","useState","_useState2","_slicedToArray","castList","setCastList","useEffect","fetch","then","res","json","data","_Fragment","CastList"],"sourceRoot":""}